import enum

class TOPIC_CLASSFIER_COMMANDS(enum.Enum):
    S_LOAD_CLASSIFIER = 1
    S_PREDICT_CLASSIFIER = 2
    S_CLEAN_CLASSIFIER = 3

class TOPIC_CLASSFIER_MODEL(enum.Enum):
    S_LOAD_CLASSIFIER = 1
    S_PREDICT_CLASSIFIER = 2
    S_CLEAN_CLASSIFIER = 3

class TOPIC_CLASSFIER_TRAINER(enum.Enum):
    S_CLEAN_DATA = 2
    TOXIC_MODEL:str = "./raw/model/"

class TOPIC_CLASSFIER_MESSAGES:
    S_CLASSIFIER_NOT_TRAINED = "CLASSIFIER NOT TRAINIED"

class TOPIC_CATEGORIES:
    S_THREAD_CATEGORY_GENERAL = "general"
    S_THREAD_CATEGORY_FORUMS = "forums"
    S_THREAD_CATEGORY_NEWS = "news"
    S_THREAD_CATEGORY_STOLEN = "stolen"
    S_THREAD_CATEGORY_DRUGS = "drugs"
    S_THREAD_CATEGORY_HACKING = "hacking"
    S_THREAD_CATEGORY_MARKETPLACES = "marketplaces"
    S_THREAD_CATEGORY_CRYPTOCURRENCY = "cryptocurrency"
    S_THREAD_CATEGORY_FRAUD = "fraud"
    S_THREAD_CATEGORY_ADULT = "adult"
    S_THREAD_CATEGORY_UNKNOWN = "unknown"

    @staticmethod
    def get_label(idx):
        labels = {
            0: TOPIC_CATEGORIES.S_THREAD_CATEGORY_GENERAL,
            1: TOPIC_CATEGORIES.S_THREAD_CATEGORY_FORUMS,
            2: TOPIC_CATEGORIES.S_THREAD_CATEGORY_NEWS,
            6: TOPIC_CATEGORIES.S_THREAD_CATEGORY_STOLEN,
            7: TOPIC_CATEGORIES.S_THREAD_CATEGORY_DRUGS,
            8: TOPIC_CATEGORIES.S_THREAD_CATEGORY_HACKING,
            9: TOPIC_CATEGORIES.S_THREAD_CATEGORY_MARKETPLACES,
            13: TOPIC_CATEGORIES.S_THREAD_CATEGORY_CRYPTOCURRENCY,
            14: TOPIC_CATEGORIES.S_THREAD_CATEGORY_FRAUD,
            15: TOPIC_CATEGORIES.S_THREAD_CATEGORY_ADULT,
        }
        return labels.get(idx, TOPIC_CATEGORIES.S_THREAD_CATEGORY_UNKNOWN)